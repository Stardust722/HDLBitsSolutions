1. Vectors0
module top_module ( 
    input wire [2:0] vec,
    output wire [2:0] outv,
    output wire o2,
    output wire o1,
    output wire o0  ); // Module body starts after module declaration
	assign outv = vec;
    	assign {o2,o1,o0} = vec; // 好用的大括号集体赋值法
endmodule

2. Vectors1
Vectors的声明：
wire [7:0] w;         // 8-bit wire
reg  [4:1] x;         // 4-bit reg
output reg [0:0] y;   // 1-bit reg that is also an output port (this is still a vector)
input wire [3:-2] z;  // 6-bit wire input (negative ranges are allowed)
output [3:0] a;       // 4-bit output wire. Type is 'wire' unless specified otherwise.
wire [0:7] b;         // 8-bit wire where b[0] is the most-significant bit.

Vectors的使用：
w[3:0]      // Only the lower 4 bits of w
x[1]        // The lowest bit of x
x[1:1]      // ...also the lowest bit of x
z[-1:-2]    // Two lowest bits of z
b[3:0]      // Illegal. Vector part-select must match the direction of the declaration.
b[0:3]      // The *upper* 4 bits of b.
assign w[3:0] = b[0:3];    // Assign upper 4 bits of b to lower 4 bits of w. w[3]=b[0], w[2]=b[1], etc.

assign的隐式定义：
	若不事先指定宽度或声明Vectors则assign操作将默认生成一个1bit wire。
	使用default_nettype none 检查类似错误。

3. Vector Part Select
module top_module( 
    input [31:0] in,
    output [31:0] out );//
    assign out[31:24] = in[7:0];
    assign out[23:16] = in[15:8];
    assign out[15:8] = in[23:16];
    assign out[7:0] = in[31:24];

endmodule

4. Vector Gates
module top_module( 
    input [2:0] a,
    input [2:0] b,
    output [2:0] out_or_bitwise,
    output out_or_logical,
    output [5:0] out_not
);
	assign out_or_bitwise = a | b;
    	assign out_or_logical = a || b;
    	assign out_not = {~b,~a};
endmodule

5. 4 input gates
module top_module( 
    input [3:0] in,
    output out_and,
    output out_or,
    output out_xor
);
    assign out_and = &in;
    assign out_or = |in;
    assign out_xor = ^in;
	//use reductional operator
	// ^ in[2:0] = in[2] ^in[1] ^ in[0]
endmodule

6. Vector Concatenation Operator
module top_module (
    input [4:0] a, b, c, d, e, f,
    output [7:0] w, x, y, z );//
    assign {w,x,y,z} = {{a,b[4:2]},{b[1:0],c,d[4]},{d[3:0],e[4:1]},{e[0],f,1'b1,1'b1}};
    // assign { ... } = { ... }; 
   // ONLY USED IN ASSIGN
  
endmodule

7. Vector Reversal 1
module top_module( 
    input [7:0] in,
    output [7:0] out
);
    assign out = {in[0],in[1],in[2],in[3],in[4],in[5],in[6],in[7]};
	//always@(*)
        begin
            for(integer i=0;i<8;i=i+1)
                out[i] = in[8-i-1];
        end
//
endmodule

8. Replication Operator
module top_module (
    input [7:0] in,
    output [31:0] out );//
    assign out = {{24{in[7]}},in};
    // assign out = { replicate-sign-bit , the-input };
endmodule

9. More Replications
module top_module (
    input a, b, c, d, e,
    output [24:0] out );//
    wire [24:0] n1 = {5{a,b,c,d,e}};
    wire [24:0] n2 = {{5{a}},{5{b}},{5{c}},{5{d}},{5{e}}};
    assign out = ~(n1 ^ n2);
    // The output is XNOR of two vectors created by 
    // concatenating and replicating the five inputs.
    // assign out = ~{ ... } ^ { ... };

endmodule

